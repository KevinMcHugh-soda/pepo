openapi: 3.0.0
info:
  title: Pepo API
  description: API for managing persons and their actions
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /people:
    get:
      summary: Get all persons
      operationId: getPersons
      tags:
        - persons
      parameters:
        - name: limit
          in: query
          description: Number of items to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of items to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  persons:
                    type: array
                    items:
                      $ref: "#/components/schemas/Person"
                  total:
                    type: integer
                    description: Total number of persons
                required:
                  - persons
                  - total
            text/html:
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a new person
      operationId: createPerson
      tags:
        - persons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePersonRequest"
      responses:
        "201":
          description: Person created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
            text/html:
              schema:
                type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /people/{id}:
    get:
      summary: Get a person by ID
      operationId: getPersonById
      tags:
        - persons
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
            text/html:
              schema:
                type: string
        "404":
          description: Person not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update a person
      operationId: updatePerson
      tags:
        - persons
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePersonRequest"
      responses:
        "200":
          description: Person updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
            text/html:
              schema:
                type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Person not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a person
      operationId: deletePerson
      tags:
        - persons
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
      responses:
        "204":
          description: Person deleted successfully
        "404":
          description: Person not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /conversations:
    post:
      summary: Create a new conversation
      operationId: createConversation
      tags:
        - conversations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateConversationRequest"
      responses:
        "201":
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
            text/html:
              schema:
                type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /actions:
    get:
      summary: Get all actions
      operationId: getActions
      tags:
        - actions
      parameters:
        - name: limit
          in: query
          description: Number of items to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of items to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: person_id
          in: query
          description: Filter by person ID
          required: false
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
        - name: valence
          in: query
          description: Filter by valence
          required: false
          schema:
            type: string
            enum: [positive, negative]
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  actions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Action"
                  total:
                    type: integer
                    description: Total number of actions
                required:
                  - actions
                  - total
            text/html:
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a new action
      operationId: createAction
      tags:
        - actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateActionRequest"
      responses:
        "201":
          description: Action created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Action"
            text/html:
              schema:
                type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /actions/{id}:
    get:
      summary: Get an action by ID
      operationId: getActionById
      tags:
        - actions
      parameters:
        - name: id
          in: path
          required: true
          description: Action ID
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Action"
            text/html:
              schema:
                type: string
        "404":
          description: Action not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update an action
      operationId: updateAction
      tags:
        - actions
      parameters:
        - name: id
          in: path
          required: true
          description: Action ID
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateActionRequest"
      responses:
        "200":
          description: Action updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Action"
            text/html:
              schema:
                type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Action not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete an action
      operationId: deleteAction
      tags:
        - actions
      parameters:
        - name: id
          in: path
          required: true
          description: Action ID
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
      responses:
        "204":
          description: Action deleted successfully
        "404":
          description: Action not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /people/{id}/actions:
    get:
      summary: Get actions for a specific person
      operationId: getPersonActions
      tags:
        - actions
        - persons
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
        - name: limit
          in: query
          description: Number of items to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of items to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: valence
          in: query
          description: Filter by valence
          required: false
          schema:
            type: string
            enum: [positive, negative]
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  actions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Action"
                  total:
                    type: integer
                    description: Total number of actions
                required:
                  - actions
                  - total
            text/html:
              schema:
                type: string
        "404":
          description: Person not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /people/{id}/timeline:
    get:
      summary: Get timeline for a specific person
      operationId: getPersonTimeline
      tags:
        - persons
        - timeline
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
        - name: limit
          in: query
          description: Number of items to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of items to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/TimelineItem"
                  total:
                    type: integer
                    description: Total number of timeline items
                required:
                  - items
                  - total
            text/html:
              schema:
                type: string
        "404":
          description: Person not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (xid)
          pattern: "^[0-9a-v]{20}$"
          example: "9m4e2mr0ui3e8a215n4g"
        name:
          type: string
          description: Full name of the person
          minLength: 1
          maxLength: 255
          example: "John Doe"
        created_at:
          type: string
          format: date-time
          description: When the person was created
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the person was last updated
          example: "2023-01-01T00:00:00Z"
      required:
        - id
        - name
        - created_at
        - updated_at

    CreatePersonRequest:
      type: object
      properties:
        name:
          type: string
          description: Full name of the person
          minLength: 1
          maxLength: 255
          example: "John Doe"
      required:
        - name

    UpdatePersonRequest:
      type: object
      properties:
        name:
          type: string
          description: Full name of the person
          minLength: 1
          maxLength: 255
          example: "John Doe"
      required:
        - name

    Action:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (xid)
          pattern: "^[0-9a-v]{20}$"
          example: "9m4e2mr0ui3e8a215n4g"
        person_id:
          type: string
          description: ID of the person this action relates to
          pattern: "^[0-9a-v]{20}$"
          example: "9m4e2mr0ui3e8a215n4g"
        occurred_at:
          type: string
          format: date-time
          description: When the action occurred
          example: "2023-01-01T00:00:00Z"
        description:
          type: string
          description: Description of the action
          minLength: 1
          example: "Completed a task"
        references:
          type: string
          description: Optional references or links related to the action
          nullable: true
          example: "https://example.com/task/123"
        valence:
          type: string
          description: Whether the action was positive or negative
          enum: [positive, negative]
          example: "positive"
        created_at:
          type: string
          format: date-time
          description: When the action was created
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the action was last updated
          example: "2023-01-01T00:00:00Z"
        person_name:
          type: string
          description: Name of the person who performed the action
          example: "John Doe"
      required:
        - id
        - person_id
        - occurred_at
        - description
        - valence
        - created_at
        - updated_at

    TimelineItem:
      type: object
      properties:
        type:
          type: string
          enum: [action, conversation]
        id:
          type: string
          pattern: "^[0-9a-v]{20}$"
        person_id:
          type: string
          pattern: "^[0-9a-v]{20}$"
        occurred_at:
          type: string
          format: date-time
        description:
          type: string
        references:
          type: string
          nullable: true
        valence:
          type: string
          enum: [positive, negative]
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - type
        - id
        - person_id
        - occurred_at
        - description
        - created_at
        - updated_at

    CreateActionRequest:
      type: object
      properties:
        person_id:
          type: string
          description: ID of the person who performed the action
          pattern: "^[0-9a-v]{20}$"
        occurred_at:
          type: string
          format: date-time
          description: When the action occurred
          example: "2023-01-01T00:00:00Z"
        description:
          type: string
          description: Description of the action
          minLength: 1
          example: "Completed a task"
        references:
          type: string
          description: Optional references or links related to the action
          nullable: true
          example: "https://example.com/task/123"
        valence:
          type: string
          description: Emotional valence of the action
          enum: ["positive", "negative", "neutral"]
          example: "positive"
        themes:
          type: array
          description: IDs of themes associated with the action
          items:
            type: string
            pattern: "^[0-9a-v]{20}$"
      required:
        - person_id
        - occurred_at
        - description
        - valence
    UpdateActionRequest:
      type: object
      properties:
        person_id:
          type: string
          description: ID of the person this action relates to
          pattern: "^[0-9a-v]{20}$"
          example: "9m4e2mr0ui3e8a215n4g"
        occurred_at:
          type: string
          format: date-time
          description: When the action occurred
          example: "2023-01-01T00:00:00Z"
        description:
          type: string
          description: Description of the action
          minLength: 1
          example: "Completed a task"
        references:
          type: string
          description: Optional references or links related to the action
          nullable: true
          example: "https://example.com/task/123"
        valence:
          type: string
          description: Whether the action was positive or negative
          enum: [positive, negative]
          example: "positive"
        themes:
          type: array
          description: IDs of themes associated with the action
          items:
            type: string
      required:
        - person_id
        - occurred_at
        - description
        - valence

    Conversation:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (xid)
          pattern: "^[0-9a-v]{20}$"
          example: "9m4e2mr0ui3e8a215n4g"
        person_id:
          type: string
          description: ID of the person this conversation relates to
          pattern: "^[0-9a-v]{20}$"
          example: "9m4e2mr0ui3e8a215n4g"
        occurred_at:
          type: string
          format: date-time
          description: When the conversation occurred
          example: "2023-01-01T00:00:00Z"
        description:
          type: string
          description: Description of the conversation
          minLength: 1
          example: "Discussed quarterly goals"
        created_at:
          type: string
          format: date-time
          description: When the conversation was created
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the conversation was last updated
          example: "2023-01-01T00:00:00Z"
      required:
        - id
        - person_id
        - occurred_at
        - description
        - created_at
        - updated_at

    CreateConversationRequest:
      type: object
      properties:
        person_id:
          type: string
          description: ID of the person this conversation relates to
          pattern: "^[0-9a-v]{20}$"
          example: "9m4e2mr0ui3e8a215n4g"
        occurred_at:
          type: string
          format: date-time
          description: When the conversation occurred
          example: "2023-01-01T00:00:00Z"
        description:
          type: string
          description: Description of the conversation
          minLength: 1
          example: "Discussed quarterly goals"
        actions:
          type: array
          description: IDs of actions associated with the conversation
          items:
            type: string
            pattern: "^[0-9a-v]{20}$"
        themes:
          type: array
          description: IDs of themes associated with the conversation
          items:
            type: string
            pattern: "^[0-9a-v]{20}$"
      required:
        - person_id
        - occurred_at
        - description

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: "Resource not found"
        code:
          type: string
          description: Error code
          example: "NOT_FOUND"
      required:
        - message
        - code

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
# Security disabled for development - uncomment when authentication is implemented
# security:
#   - bearerAuth: []
