openapi: 3.0.3
info:
  title: Performance Tracking API
  description: API for tracking performance of direct reports
  version: 1.0.0
  contact:
    name: Performance Tracking Team
    email: team@perf-tracking.com

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server

paths:
  /persons:
    get:
      summary: List all persons
      operationId: listPersons
      tags:
        - persons
      parameters:
        - name: limit
          in: query
          description: Maximum number of persons to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of persons to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  persons:
                    type: array
                    items:
                      $ref: "#/components/schemas/Person"
                  total:
                    type: integer
                    description: Total number of persons
                required:
                  - persons
                  - total
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a new person
      operationId: createPerson
      tags:
        - persons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePersonRequest"
      responses:
        "201":
          description: Person created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /persons/{id}:
    get:
      summary: Get a person by ID
      operationId: getPerson
      tags:
        - persons
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID (xid)
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "404":
          description: Person not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update a person
      operationId: updatePerson
      tags:
        - persons
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID (xid)
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePersonRequest"
      responses:
        "200":
          description: Person updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Person not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a person
      operationId: deletePerson
      tags:
        - persons
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID (xid)
          schema:
            type: string
            pattern: "^[0-9a-v]{20}$"
      responses:
        "204":
          description: Person deleted successfully
        "404":
          description: Person not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier (xid)
          pattern: "^[0-9a-v]{20}$"
          example: "9m4e2mr0ui3e8a215n4g"
        name:
          type: string
          description: Person's full name
          minLength: 1
          maxLength: 255
          example: "John Doe"
        created_at:
          type: string
          format: date-time
          description: When the person was created
          example: "2023-12-01T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the person was last updated
          example: "2023-12-01T10:30:00Z"
      required:
        - id
        - name
        - created_at
        - updated_at

    CreatePersonRequest:
      type: object
      properties:
        name:
          type: string
          description: Person's full name
          minLength: 1
          maxLength: 255
          example: "John Doe"
      required:
        - name

    UpdatePersonRequest:
      type: object
      properties:
        name:
          type: string
          description: Person's full name
          minLength: 1
          maxLength: 255
          example: "John Doe"
      required:
        - name

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: "Something went wrong"
        code:
          type: string
          description: Error code
          example: "INTERNAL_ERROR"
      required:
        - message
        - code

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
# Security disabled for development - uncomment when authentication is implemented
# security:
#   - bearerAuth: []
