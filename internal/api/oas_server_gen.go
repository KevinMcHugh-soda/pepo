// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateAction implements createAction operation.
	//
	// Create a new action.
	//
	// POST /actions
	CreateAction(ctx context.Context, req *CreateActionRequest) (CreateActionRes, error)
	// CreateConversation implements createConversation operation.
	//
	// Create a new conversation.
	//
	// POST /conversations
	CreateConversation(ctx context.Context, req *CreateConversationRequest) (CreateConversationRes, error)
	// CreatePerson implements createPerson operation.
	//
	// Create a new person.
	//
	// POST /people
	CreatePerson(ctx context.Context, req *CreatePersonRequest) (CreatePersonRes, error)
	// DeleteAction implements deleteAction operation.
	//
	// Delete an action.
	//
	// DELETE /actions/{id}
	DeleteAction(ctx context.Context, params DeleteActionParams) (DeleteActionRes, error)
	// DeletePerson implements deletePerson operation.
	//
	// Delete a person.
	//
	// DELETE /people/{id}
	DeletePerson(ctx context.Context, params DeletePersonParams) (DeletePersonRes, error)
	// GetActionById implements getActionById operation.
	//
	// Get an action by ID.
	//
	// GET /actions/{id}
	GetActionById(ctx context.Context, params GetActionByIdParams) (GetActionByIdRes, error)
	// GetActions implements getActions operation.
	//
	// Get all actions.
	//
	// GET /actions
	GetActions(ctx context.Context, params GetActionsParams) (GetActionsRes, error)
	// GetPersonActions implements getPersonActions operation.
	//
	// Get actions for a specific person.
	//
	// GET /people/{id}/actions
	GetPersonActions(ctx context.Context, params GetPersonActionsParams) (GetPersonActionsRes, error)
	// GetPersonById implements getPersonById operation.
	//
	// Get a person by ID.
	//
	// GET /people/{id}
	GetPersonById(ctx context.Context, params GetPersonByIdParams) (GetPersonByIdRes, error)
	// GetPersonTimeline implements getPersonTimeline operation.
	//
	// Get timeline for a specific person.
	//
	// GET /people/{id}/timeline
	GetPersonTimeline(ctx context.Context, params GetPersonTimelineParams) (GetPersonTimelineRes, error)
	// GetPersons implements getPersons operation.
	//
	// Get all persons.
	//
	// GET /people
	GetPersons(ctx context.Context, params GetPersonsParams) (GetPersonsRes, error)
	// UpdateAction implements updateAction operation.
	//
	// Update an action.
	//
	// PUT /actions/{id}
	UpdateAction(ctx context.Context, req *UpdateActionRequest, params UpdateActionParams) (UpdateActionRes, error)
	// UpdatePerson implements updatePerson operation.
	//
	// Update a person.
	//
	// PUT /people/{id}
	UpdatePerson(ctx context.Context, req *UpdatePersonRequest, params UpdatePersonParams) (UpdatePersonRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
