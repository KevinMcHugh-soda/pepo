// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"time"

	"github.com/go-faster/errors"
)

// Ref: #/components/schemas/Action
type Action struct {
	// Unique identifier (xid).
	ID string `json:"id"`
	// ID of the person this action relates to.
	PersonID string `json:"person_id"`
	// When the action occurred.
	OccurredAt time.Time `json:"occurred_at"`
	// Description of the action.
	Description string `json:"description"`
	// Optional references or links related to the action.
	References OptNilString `json:"references"`
	// Whether the action was positive or negative.
	Valence ActionValence `json:"valence"`
	// When the action was created.
	CreatedAt time.Time `json:"created_at"`
	// When the action was last updated.
	UpdatedAt time.Time `json:"updated_at"`
	// Name of the person who performed the action.
	PersonName OptString `json:"person_name"`
}

// GetID returns the value of ID.
func (s *Action) GetID() string {
	return s.ID
}

// GetPersonID returns the value of PersonID.
func (s *Action) GetPersonID() string {
	return s.PersonID
}

// GetOccurredAt returns the value of OccurredAt.
func (s *Action) GetOccurredAt() time.Time {
	return s.OccurredAt
}

// GetDescription returns the value of Description.
func (s *Action) GetDescription() string {
	return s.Description
}

// GetReferences returns the value of References.
func (s *Action) GetReferences() OptNilString {
	return s.References
}

// GetValence returns the value of Valence.
func (s *Action) GetValence() ActionValence {
	return s.Valence
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Action) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Action) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPersonName returns the value of PersonName.
func (s *Action) GetPersonName() OptString {
	return s.PersonName
}

// SetID sets the value of ID.
func (s *Action) SetID(val string) {
	s.ID = val
}

// SetPersonID sets the value of PersonID.
func (s *Action) SetPersonID(val string) {
	s.PersonID = val
}

// SetOccurredAt sets the value of OccurredAt.
func (s *Action) SetOccurredAt(val time.Time) {
	s.OccurredAt = val
}

// SetDescription sets the value of Description.
func (s *Action) SetDescription(val string) {
	s.Description = val
}

// SetReferences sets the value of References.
func (s *Action) SetReferences(val OptNilString) {
	s.References = val
}

// SetValence sets the value of Valence.
func (s *Action) SetValence(val ActionValence) {
	s.Valence = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Action) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Action) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPersonName sets the value of PersonName.
func (s *Action) SetPersonName(val OptString) {
	s.PersonName = val
}

func (*Action) createActionRes()  {}
func (*Action) getActionByIdRes() {}
func (*Action) updateActionRes()  {}

// Whether the action was positive or negative.
type ActionValence string

const (
	ActionValencePositive ActionValence = "positive"
	ActionValenceNegative ActionValence = "negative"
)

// AllValues returns all ActionValence values.
func (ActionValence) AllValues() []ActionValence {
	return []ActionValence{
		ActionValencePositive,
		ActionValenceNegative,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ActionValence) MarshalText() ([]byte, error) {
	switch s {
	case ActionValencePositive:
		return []byte(s), nil
	case ActionValenceNegative:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActionValence) UnmarshalText(data []byte) error {
	switch ActionValence(data) {
	case ActionValencePositive:
		*s = ActionValencePositive
		return nil
	case ActionValenceNegative:
		*s = ActionValenceNegative
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateActionBadRequest Error

func (*CreateActionBadRequest) createActionRes() {}

type CreateActionCreatedTextHTML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s CreateActionCreatedTextHTML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*CreateActionCreatedTextHTML) createActionRes() {}

type CreateActionInternalServerError Error

func (*CreateActionInternalServerError) createActionRes() {}

// Ref: #/components/schemas/CreateActionRequest
type CreateActionRequest struct {
	// ID of the person who performed the action.
	PersonID string `json:"person_id"`
	// When the action occurred.
	OccurredAt time.Time `json:"occurred_at"`
	// Description of the action.
	Description string `json:"description"`
	// Optional references or links related to the action.
	References OptNilString `json:"references"`
	// Emotional valence of the action.
	Valence CreateActionRequestValence `json:"valence"`
	// IDs of themes associated with the action.
	Themes []string `json:"themes"`
	// Name of a new theme to create and associate with the action.
	NewTheme OptString `json:"newTheme"`
}

// GetPersonID returns the value of PersonID.
func (s *CreateActionRequest) GetPersonID() string {
	return s.PersonID
}

// GetOccurredAt returns the value of OccurredAt.
func (s *CreateActionRequest) GetOccurredAt() time.Time {
	return s.OccurredAt
}

// GetDescription returns the value of Description.
func (s *CreateActionRequest) GetDescription() string {
	return s.Description
}

// GetReferences returns the value of References.
func (s *CreateActionRequest) GetReferences() OptNilString {
	return s.References
}

// GetValence returns the value of Valence.
func (s *CreateActionRequest) GetValence() CreateActionRequestValence {
	return s.Valence
}

// GetThemes returns the value of Themes.
func (s *CreateActionRequest) GetThemes() []string {
	return s.Themes
}

// GetNewTheme returns the value of NewTheme.
func (s *CreateActionRequest) GetNewTheme() OptString {
	return s.NewTheme
}

// SetPersonID sets the value of PersonID.
func (s *CreateActionRequest) SetPersonID(val string) {
	s.PersonID = val
}

// SetOccurredAt sets the value of OccurredAt.
func (s *CreateActionRequest) SetOccurredAt(val time.Time) {
	s.OccurredAt = val
}

// SetDescription sets the value of Description.
func (s *CreateActionRequest) SetDescription(val string) {
	s.Description = val
}

// SetReferences sets the value of References.
func (s *CreateActionRequest) SetReferences(val OptNilString) {
	s.References = val
}

// SetValence sets the value of Valence.
func (s *CreateActionRequest) SetValence(val CreateActionRequestValence) {
	s.Valence = val
}

// SetThemes sets the value of Themes.
func (s *CreateActionRequest) SetThemes(val []string) {
	s.Themes = val
}

// SetNewTheme sets the value of NewTheme.
func (s *CreateActionRequest) SetNewTheme(val OptString) {
	s.NewTheme = val
}

// Emotional valence of the action.
type CreateActionRequestValence string

const (
	CreateActionRequestValencePositive CreateActionRequestValence = "positive"
	CreateActionRequestValenceNegative CreateActionRequestValence = "negative"
	CreateActionRequestValenceNeutral  CreateActionRequestValence = "neutral"
)

// AllValues returns all CreateActionRequestValence values.
func (CreateActionRequestValence) AllValues() []CreateActionRequestValence {
	return []CreateActionRequestValence{
		CreateActionRequestValencePositive,
		CreateActionRequestValenceNegative,
		CreateActionRequestValenceNeutral,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateActionRequestValence) MarshalText() ([]byte, error) {
	switch s {
	case CreateActionRequestValencePositive:
		return []byte(s), nil
	case CreateActionRequestValenceNegative:
		return []byte(s), nil
	case CreateActionRequestValenceNeutral:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateActionRequestValence) UnmarshalText(data []byte) error {
	switch CreateActionRequestValence(data) {
	case CreateActionRequestValencePositive:
		*s = CreateActionRequestValencePositive
		return nil
	case CreateActionRequestValenceNegative:
		*s = CreateActionRequestValenceNegative
		return nil
	case CreateActionRequestValenceNeutral:
		*s = CreateActionRequestValenceNeutral
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatePersonBadRequest Error

func (*CreatePersonBadRequest) createPersonRes() {}

type CreatePersonCreatedTextHTML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s CreatePersonCreatedTextHTML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*CreatePersonCreatedTextHTML) createPersonRes() {}

type CreatePersonInternalServerError Error

func (*CreatePersonInternalServerError) createPersonRes() {}

// Ref: #/components/schemas/CreatePersonRequest
type CreatePersonRequest struct {
	// Full name of the person.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *CreatePersonRequest) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *CreatePersonRequest) SetName(val string) {
	s.Name = val
}

type DeleteActionInternalServerError Error

func (*DeleteActionInternalServerError) deleteActionRes() {}

// DeleteActionNoContent is response for DeleteAction operation.
type DeleteActionNoContent struct{}

func (*DeleteActionNoContent) deleteActionRes() {}

type DeleteActionNotFound Error

func (*DeleteActionNotFound) deleteActionRes() {}

type DeletePersonInternalServerError Error

func (*DeletePersonInternalServerError) deletePersonRes() {}

// DeletePersonNoContent is response for DeletePerson operation.
type DeletePersonNoContent struct{}

func (*DeletePersonNoContent) deletePersonRes() {}

type DeletePersonNotFound Error

func (*DeletePersonNotFound) deletePersonRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	// Error message.
	Message string `json:"message"`
	// Error code.
	Code string `json:"code"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetCode returns the value of Code.
func (s *Error) GetCode() string {
	return s.Code
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val string) {
	s.Code = val
}

func (*Error) getActionsRes() {}
func (*Error) getPersonsRes() {}

type GetActionByIdInternalServerError Error

func (*GetActionByIdInternalServerError) getActionByIdRes() {}

type GetActionByIdNotFound Error

func (*GetActionByIdNotFound) getActionByIdRes() {}

type GetActionByIdOKTextHTML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetActionByIdOKTextHTML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetActionByIdOKTextHTML) getActionByIdRes() {}

type GetActionsOKApplicationJSON struct {
	Actions []Action `json:"actions"`
	// Total number of actions.
	Total int `json:"total"`
}

// GetActions returns the value of Actions.
func (s *GetActionsOKApplicationJSON) GetActions() []Action {
	return s.Actions
}

// GetTotal returns the value of Total.
func (s *GetActionsOKApplicationJSON) GetTotal() int {
	return s.Total
}

// SetActions sets the value of Actions.
func (s *GetActionsOKApplicationJSON) SetActions(val []Action) {
	s.Actions = val
}

// SetTotal sets the value of Total.
func (s *GetActionsOKApplicationJSON) SetTotal(val int) {
	s.Total = val
}

func (*GetActionsOKApplicationJSON) getActionsRes() {}

type GetActionsOKTextHTML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetActionsOKTextHTML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetActionsOKTextHTML) getActionsRes() {}

type GetActionsValence string

const (
	GetActionsValencePositive GetActionsValence = "positive"
	GetActionsValenceNegative GetActionsValence = "negative"
)

// AllValues returns all GetActionsValence values.
func (GetActionsValence) AllValues() []GetActionsValence {
	return []GetActionsValence{
		GetActionsValencePositive,
		GetActionsValenceNegative,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetActionsValence) MarshalText() ([]byte, error) {
	switch s {
	case GetActionsValencePositive:
		return []byte(s), nil
	case GetActionsValenceNegative:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetActionsValence) UnmarshalText(data []byte) error {
	switch GetActionsValence(data) {
	case GetActionsValencePositive:
		*s = GetActionsValencePositive
		return nil
	case GetActionsValenceNegative:
		*s = GetActionsValenceNegative
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPersonActionsInternalServerError Error

func (*GetPersonActionsInternalServerError) getPersonActionsRes() {}

type GetPersonActionsNotFound Error

func (*GetPersonActionsNotFound) getPersonActionsRes() {}

type GetPersonActionsOKApplicationJSON struct {
	Actions []Action `json:"actions"`
	// Total number of actions.
	Total int `json:"total"`
}

// GetActions returns the value of Actions.
func (s *GetPersonActionsOKApplicationJSON) GetActions() []Action {
	return s.Actions
}

// GetTotal returns the value of Total.
func (s *GetPersonActionsOKApplicationJSON) GetTotal() int {
	return s.Total
}

// SetActions sets the value of Actions.
func (s *GetPersonActionsOKApplicationJSON) SetActions(val []Action) {
	s.Actions = val
}

// SetTotal sets the value of Total.
func (s *GetPersonActionsOKApplicationJSON) SetTotal(val int) {
	s.Total = val
}

func (*GetPersonActionsOKApplicationJSON) getPersonActionsRes() {}

type GetPersonActionsOKTextHTML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPersonActionsOKTextHTML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetPersonActionsOKTextHTML) getPersonActionsRes() {}

type GetPersonActionsValence string

const (
	GetPersonActionsValencePositive GetPersonActionsValence = "positive"
	GetPersonActionsValenceNegative GetPersonActionsValence = "negative"
)

// AllValues returns all GetPersonActionsValence values.
func (GetPersonActionsValence) AllValues() []GetPersonActionsValence {
	return []GetPersonActionsValence{
		GetPersonActionsValencePositive,
		GetPersonActionsValenceNegative,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPersonActionsValence) MarshalText() ([]byte, error) {
	switch s {
	case GetPersonActionsValencePositive:
		return []byte(s), nil
	case GetPersonActionsValenceNegative:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPersonActionsValence) UnmarshalText(data []byte) error {
	switch GetPersonActionsValence(data) {
	case GetPersonActionsValencePositive:
		*s = GetPersonActionsValencePositive
		return nil
	case GetPersonActionsValenceNegative:
		*s = GetPersonActionsValenceNegative
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPersonByIdInternalServerError Error

func (*GetPersonByIdInternalServerError) getPersonByIdRes() {}

type GetPersonByIdNotFound Error

func (*GetPersonByIdNotFound) getPersonByIdRes() {}

type GetPersonByIdOKTextHTML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPersonByIdOKTextHTML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetPersonByIdOKTextHTML) getPersonByIdRes() {}

type GetPersonsOKApplicationJSON struct {
	Persons []Person `json:"persons"`
	// Total number of persons.
	Total int `json:"total"`
}

// GetPersons returns the value of Persons.
func (s *GetPersonsOKApplicationJSON) GetPersons() []Person {
	return s.Persons
}

// GetTotal returns the value of Total.
func (s *GetPersonsOKApplicationJSON) GetTotal() int {
	return s.Total
}

// SetPersons sets the value of Persons.
func (s *GetPersonsOKApplicationJSON) SetPersons(val []Person) {
	s.Persons = val
}

// SetTotal sets the value of Total.
func (s *GetPersonsOKApplicationJSON) SetTotal(val int) {
	s.Total = val
}

func (*GetPersonsOKApplicationJSON) getPersonsRes() {}

type GetPersonsOKTextHTML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPersonsOKTextHTML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetPersonsOKTextHTML) getPersonsRes() {}

// NewOptGetActionsValence returns new OptGetActionsValence with value set to v.
func NewOptGetActionsValence(v GetActionsValence) OptGetActionsValence {
	return OptGetActionsValence{
		Value: v,
		Set:   true,
	}
}

// OptGetActionsValence is optional GetActionsValence.
type OptGetActionsValence struct {
	Value GetActionsValence
	Set   bool
}

// IsSet returns true if OptGetActionsValence was set.
func (o OptGetActionsValence) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetActionsValence) Reset() {
	var v GetActionsValence
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetActionsValence) SetTo(v GetActionsValence) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetActionsValence) Get() (v GetActionsValence, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetActionsValence) Or(d GetActionsValence) GetActionsValence {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPersonActionsValence returns new OptGetPersonActionsValence with value set to v.
func NewOptGetPersonActionsValence(v GetPersonActionsValence) OptGetPersonActionsValence {
	return OptGetPersonActionsValence{
		Value: v,
		Set:   true,
	}
}

// OptGetPersonActionsValence is optional GetPersonActionsValence.
type OptGetPersonActionsValence struct {
	Value GetPersonActionsValence
	Set   bool
}

// IsSet returns true if OptGetPersonActionsValence was set.
func (o OptGetPersonActionsValence) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPersonActionsValence) Reset() {
	var v GetPersonActionsValence
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPersonActionsValence) SetTo(v GetPersonActionsValence) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPersonActionsValence) Get() (v GetPersonActionsValence, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPersonActionsValence) Or(d GetPersonActionsValence) GetPersonActionsValence {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Person
type Person struct {
	// Unique identifier (xid).
	ID string `json:"id"`
	// Full name of the person.
	Name string `json:"name"`
	// When the person was created.
	CreatedAt time.Time `json:"created_at"`
	// When the person was last updated.
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Person) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Person) GetName() string {
	return s.Name
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Person) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Person) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Person) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Person) SetName(val string) {
	s.Name = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Person) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Person) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*Person) createPersonRes()  {}
func (*Person) getPersonByIdRes() {}
func (*Person) updatePersonRes()  {}

type UpdateActionBadRequest Error

func (*UpdateActionBadRequest) updateActionRes() {}

type UpdateActionInternalServerError Error

func (*UpdateActionInternalServerError) updateActionRes() {}

type UpdateActionNotFound Error

func (*UpdateActionNotFound) updateActionRes() {}

type UpdateActionOKTextHTML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s UpdateActionOKTextHTML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*UpdateActionOKTextHTML) updateActionRes() {}

// Ref: #/components/schemas/UpdateActionRequest
type UpdateActionRequest struct {
	// ID of the person this action relates to.
	PersonID string `json:"person_id"`
	// When the action occurred.
	OccurredAt time.Time `json:"occurred_at"`
	// Description of the action.
	Description string `json:"description"`
	// Optional references or links related to the action.
	References OptNilString `json:"references"`
	// Whether the action was positive or negative.
	Valence UpdateActionRequestValence `json:"valence"`
	// IDs of themes associated with the action.
	Themes []string `json:"themes"`
}

// GetPersonID returns the value of PersonID.
func (s *UpdateActionRequest) GetPersonID() string {
	return s.PersonID
}

// GetOccurredAt returns the value of OccurredAt.
func (s *UpdateActionRequest) GetOccurredAt() time.Time {
	return s.OccurredAt
}

// GetDescription returns the value of Description.
func (s *UpdateActionRequest) GetDescription() string {
	return s.Description
}

// GetReferences returns the value of References.
func (s *UpdateActionRequest) GetReferences() OptNilString {
	return s.References
}

// GetValence returns the value of Valence.
func (s *UpdateActionRequest) GetValence() UpdateActionRequestValence {
	return s.Valence
}

// GetThemes returns the value of Themes.
func (s *UpdateActionRequest) GetThemes() []string {
	return s.Themes
}

// SetPersonID sets the value of PersonID.
func (s *UpdateActionRequest) SetPersonID(val string) {
	s.PersonID = val
}

// SetOccurredAt sets the value of OccurredAt.
func (s *UpdateActionRequest) SetOccurredAt(val time.Time) {
	s.OccurredAt = val
}

// SetDescription sets the value of Description.
func (s *UpdateActionRequest) SetDescription(val string) {
	s.Description = val
}

// SetReferences sets the value of References.
func (s *UpdateActionRequest) SetReferences(val OptNilString) {
	s.References = val
}

// SetValence sets the value of Valence.
func (s *UpdateActionRequest) SetValence(val UpdateActionRequestValence) {
	s.Valence = val
}

// SetThemes sets the value of Themes.
func (s *UpdateActionRequest) SetThemes(val []string) {
	s.Themes = val
}

// Whether the action was positive or negative.
type UpdateActionRequestValence string

const (
	UpdateActionRequestValencePositive UpdateActionRequestValence = "positive"
	UpdateActionRequestValenceNegative UpdateActionRequestValence = "negative"
)

// AllValues returns all UpdateActionRequestValence values.
func (UpdateActionRequestValence) AllValues() []UpdateActionRequestValence {
	return []UpdateActionRequestValence{
		UpdateActionRequestValencePositive,
		UpdateActionRequestValenceNegative,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateActionRequestValence) MarshalText() ([]byte, error) {
	switch s {
	case UpdateActionRequestValencePositive:
		return []byte(s), nil
	case UpdateActionRequestValenceNegative:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateActionRequestValence) UnmarshalText(data []byte) error {
	switch UpdateActionRequestValence(data) {
	case UpdateActionRequestValencePositive:
		*s = UpdateActionRequestValencePositive
		return nil
	case UpdateActionRequestValenceNegative:
		*s = UpdateActionRequestValenceNegative
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdatePersonBadRequest Error

func (*UpdatePersonBadRequest) updatePersonRes() {}

type UpdatePersonInternalServerError Error

func (*UpdatePersonInternalServerError) updatePersonRes() {}

type UpdatePersonNotFound Error

func (*UpdatePersonNotFound) updatePersonRes() {}

type UpdatePersonOKTextHTML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s UpdatePersonOKTextHTML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*UpdatePersonOKTextHTML) updatePersonRes() {}

// Ref: #/components/schemas/UpdatePersonRequest
type UpdatePersonRequest struct {
	// Full name of the person.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *UpdatePersonRequest) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *UpdatePersonRequest) SetName(val string) {
	s.Name = val
}
