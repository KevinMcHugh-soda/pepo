// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: action_conversations.sql

package db

import (
	"context"
)

const addActionToConversation = `-- name: AddActionToConversation :exec
INSERT INTO action_conversation (action_id, conversation_id)
VALUES (x2b($1), x2b($2))
`

type AddActionToConversationParams struct {
	ActionID       string `db:"action_id" json:"action_id"`
	ConversationID string `db:"conversation_id" json:"conversation_id"`
}

func (q *Queries) AddActionToConversation(ctx context.Context, arg AddActionToConversationParams) error {
	_, err := q.db.ExecContext(ctx, addActionToConversation, arg.ActionID, arg.ConversationID)
	return err
}

const deleteActionsByConversationID = `-- name: DeleteActionsByConversationID :exec
DELETE FROM action_conversation
WHERE conversation_id = x2b($1)
`

func (q *Queries) DeleteActionsByConversationID(ctx context.Context, conversationID string) error {
	_, err := q.db.ExecContext(ctx, deleteActionsByConversationID, conversationID)
	return err
}

const listActionIDsByConversationID = `-- name: ListActionIDsByConversationID :many
SELECT action_id
FROM action_conversation
WHERE conversation_id = x2b($1)
`

func (q *Queries) ListActionIDsByConversationID(ctx context.Context, conversationID string) ([][]byte, error) {
	rows, err := q.db.QueryContext(ctx, listActionIDsByConversationID, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := [][]byte{}
	for rows.Next() {
		var action_id []byte
		if err := rows.Scan(&action_id); err != nil {
			return nil, err
		}
		items = append(items, action_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
