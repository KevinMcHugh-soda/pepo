// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: action_themes.sql

package db

import (
	"context"
)

const addThemeToAction = `-- name: AddThemeToAction :exec
INSERT INTO action_themes (action_id, theme_id)
VALUES (x2b($1), x2b($2))
`

type AddThemeToActionParams struct {
	XidStr   string `db:"xid_str" json:"xid_str"`
	XidStr_2 string `db:"xid_str_2" json:"xid_str_2"`
}

func (q *Queries) AddThemeToAction(ctx context.Context, arg AddThemeToActionParams) error {
	_, err := q.db.ExecContext(ctx, addThemeToAction, arg.XidStr, arg.XidStr_2)
	return err
}

const listActionsByThemeID = `-- name: ListActionsByThemeID :many
SELECT action.id, action.person_id, action.occurred_at, action.description, action."references", action.valence, action.created_at, action.updated_at
FROM action_themes at
JOIN action ON at.action_id = action.id
WHERE at.theme_id = x2b($1)
ORDER BY action.created_at DESC
LIMIT $2 OFFSET $3
`

type ListActionsByThemeIDParams struct {
	XidStr string `db:"xid_str" json:"xid_str"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

type ListActionsByThemeIDRow struct {
	Action Action `db:"action" json:"action"`
}

func (q *Queries) ListActionsByThemeID(ctx context.Context, arg ListActionsByThemeIDParams) ([]ListActionsByThemeIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listActionsByThemeID, arg.XidStr, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListActionsByThemeIDRow{}
	for rows.Next() {
		var i ListActionsByThemeIDRow
		if err := rows.Scan(
			&i.Action.ID,
			&i.Action.PersonID,
			&i.Action.OccurredAt,
			&i.Action.Description,
			&i.Action.References,
			&i.Action.Valence,
			&i.Action.CreatedAt,
			&i.Action.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThemesByActionID = `-- name: ListThemesByActionID :many
SELECT theme.id, theme.person_id, theme.text, theme.created_at, theme.updated_at
FROM action_themes at
JOIN theme ON at.theme_id = theme.id
WHERE at.action_id = x2b($1)
ORDER BY theme.created_at DESC
LIMIT $2 OFFSET $3
`

type ListThemesByActionIDParams struct {
	XidStr string `db:"xid_str" json:"xid_str"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

type ListThemesByActionIDRow struct {
	Theme Theme `db:"theme" json:"theme"`
}

func (q *Queries) ListThemesByActionID(ctx context.Context, arg ListThemesByActionIDParams) ([]ListThemesByActionIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listThemesByActionID, arg.XidStr, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListThemesByActionIDRow{}
	for rows.Next() {
		var i ListThemesByActionIDRow
		if err := rows.Scan(
			&i.Theme.ID,
			&i.Theme.PersonID,
			&i.Theme.Text,
			&i.Theme.CreatedAt,
			&i.Theme.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeThemeFromAction = `-- name: RemoveThemeFromAction :exec
DELETE FROM action_themes
WHERE action_id = x2b($1) AND theme_id = x2b($2)
`

type RemoveThemeFromActionParams struct {
	XidStr   string `db:"xid_str" json:"xid_str"`
	XidStr_2 string `db:"xid_str_2" json:"xid_str_2"`
}

func (q *Queries) RemoveThemeFromAction(ctx context.Context, arg RemoveThemeFromActionParams) error {
	_, err := q.db.ExecContext(ctx, removeThemeFromAction, arg.XidStr, arg.XidStr_2)
	return err
}
