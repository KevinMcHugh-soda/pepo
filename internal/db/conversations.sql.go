// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: conversations.sql

package db

import (
	"context"
	"time"
)

const addActionToConversation = `-- name: AddActionToConversation :exec
INSERT INTO action_conversation (action_id, conversation_id)
VALUES (x2b($1), x2b($2))
`

type AddActionToConversationParams struct {
	ActionID       string `db:"action_id" json:"action_id"`
	ConversationID string `db:"conversation_id" json:"conversation_id"`
}

func (q *Queries) AddActionToConversation(ctx context.Context, arg AddActionToConversationParams) error {
	_, err := q.db.ExecContext(ctx, addActionToConversation, arg.ActionID, arg.ConversationID)
	return err
}

const addThemeToConversation = `-- name: AddThemeToConversation :exec
INSERT INTO conversation_theme (conversation_id, theme_id)
VALUES (x2b($1), x2b($2))
`

type AddThemeToConversationParams struct {
	ConversationID string `db:"conversation_id" json:"conversation_id"`
	ThemeID        string `db:"theme_id" json:"theme_id"`
}

func (q *Queries) AddThemeToConversation(ctx context.Context, arg AddThemeToConversationParams) error {
	_, err := q.db.ExecContext(ctx, addThemeToConversation, arg.ConversationID, arg.ThemeID)
	return err
}

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversation (id, description, occurred_at)
VALUES (x2b($1), $2, $3)
RETURNING conversation.id, conversation.description, conversation.occurred_at, conversation.created_at, conversation.updated_at
`

type CreateConversationParams struct {
	ID          string    `db:"id" json:"id"`
	Description string    `db:"description" json:"description"`
	OccurredAt  time.Time `db:"occurred_at" json:"occurred_at"`
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation, arg.ID, arg.Description, arg.OccurredAt)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.OccurredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
