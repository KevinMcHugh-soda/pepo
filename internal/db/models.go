// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	xidb "github.com/rs/xid/b"
)

type ValenceType string

const (
	ValenceTypePositive ValenceType = "positive"
	ValenceTypeNegative ValenceType = "negative"
)

func (e *ValenceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ValenceType(s)
	case string:
		*e = ValenceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ValenceType: %T", src)
	}
	return nil
}

type NullValenceType struct {
	ValenceType ValenceType `json:"valence_type"`
	Valid       bool        `json:"valid"` // Valid is true if ValenceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullValenceType) Scan(value interface{}) error {
	if value == nil {
		ns.ValenceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ValenceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullValenceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ValenceType), nil
}

func (e ValenceType) Valid() bool {
	switch e {
	case ValenceTypePositive,
		ValenceTypeNegative:
		return true
	}
	return false
}

func AllValenceTypeValues() []ValenceType {
	return []ValenceType{
		ValenceTypePositive,
		ValenceTypeNegative,
	}
}

type Action struct {
	ID          xidb.ID        `db:"id" json:"id"`
	PersonID    xidb.ID        `db:"person_id" json:"person_id"`
	OccurredAt  time.Time      `db:"occurred_at" json:"occurred_at"`
	Description string         `db:"description" json:"description"`
	References  sql.NullString `db:"references" json:"references"`
	Valence     ValenceType    `db:"valence" json:"valence"`
	CreatedAt   time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time      `db:"updated_at" json:"updated_at"`
}

type Person struct {
	ID        xidb.ID   `db:"id" json:"id"`
	Name      string    `db:"name" json:"name"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

type SchemaMigration struct {
	Version string `db:"version" json:"version"`
}
