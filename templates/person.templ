package templates

import "time"

type Person struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

templ PersonItem(person Person) {
	<div class="border-b pb-2 mb-2" id={ "person-" + person.ID }>
		<div class="flex justify-between items-center">
			<div>
				<a href={ "/api/v1/people/" + person.ID } class="font-medium text-blue-600 hover:text-blue-800 hover:underline">{ person.Name }</a>
				<span class="text-sm text-gray-500 ml-2">ID: { person.ID }</span>
			</div>
			<div class="space-x-2">
				<!-- Edit functionality to be implemented with consolidated API -->
				<button
					hx-delete={ "/api/v1/people/" + person.ID }
					hx-target={ "#person-" + person.ID }
					hx-swap="outerHTML"
					hx-confirm="Are you sure you want to delete this person?"
					class="text-red-500 hover:text-red-700 text-sm"
				>
					Delete
				</button>
			</div>
		</div>
		<div class="text-xs text-gray-400 mt-1">
			Created: { person.CreatedAt.Format("2006-01-02 15:04:05") } | Updated: { person.UpdatedAt.Format("2006-01-02 15:04:05") }
		</div>
	</div>
}

templ PersonList(persons []Person) {
	if len(persons) == 0 {
		<div class="text-gray-500 text-center py-4">No people found. Add someone above!</div>
	} else {
		for _, person := range persons {
			@PersonItem(person)
		}
	}
}

templ PersonSelectOptions(persons []Person) {
	<option value="">Select a person...</option>
	for _, person := range persons {
		<option value={ person.ID }>{ person.Name }</option>
	}
}

templ PersonSelectError() {
	<option value="">Error loading people</option>
}

templ PersonSelectLoading() {
	<option value="">Loading people...</option>
}

templ PersonDetail(person Person, actions []Action) {
	@Layout(person.Name + " - Person Details") {
		<!-- Header with back button -->
		<div class="mb-6">
			<a href="/" class="text-blue-600 hover:text-blue-800 flex items-center mb-4">
				← Back to People List
			</a>
			<div class="bg-white rounded-lg shadow p-6">
				<h1 class="text-2xl font-bold text-gray-900 mb-2">{ person.Name }</h1>
				<div class="text-sm text-gray-600">
					<p>ID: { person.ID }</p>
					<p>Created: { person.CreatedAt.Format("2006-01-02 15:04:05") }</p>
					<p>Updated: { person.UpdatedAt.Format("2006-01-02 15:04:05") }</p>
				</div>
			</div>
		</div>
		<!-- Actions section -->
		<div class="bg-white rounded-lg shadow p-6">
			<div class="flex justify-between items-center mb-4">
				<h2 class="text-xl font-semibold text-gray-900">Actions ({ len(actions) })</h2>
				<a href="/" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded text-sm">
					Add New Action
				</a>
			</div>
			if len(actions) == 0 {
				<div class="text-gray-500 text-center py-8">
					<p class="mb-2">No actions recorded for { person.Name } yet.</p>
					<a href="/" class="text-blue-600 hover:text-blue-800">Go back to add some actions</a>
				</div>
			} else {
				<div class="space-y-4">
					for _, action := range actions {
						<div class="border-b pb-4 last:border-b-0">
							<div class="flex items-start justify-between">
								<div class="flex-1">
									<div class="flex items-center gap-2 mb-2">
										<span class={ "inline-block w-3 h-3 rounded-full " + getBgColorForValence(action.Valence) }></span>
										<span class={ "font-medium capitalize " + getValenceColor(action.Valence) }>{ action.Valence }</span>
										<span class="text-sm text-gray-500">{ action.OccurredAt.Format("January 2, 2006 at 3:04 PM") }</span>
									</div>
									<p class="text-gray-800 mb-2">{ action.Description }</p>
									if action.References != "" {
										<div class="text-sm text-blue-600 mb-2">
											<a href={ templ.URL(action.References) } target="_blank" class="underline hover:no-underline">
												View Reference →
											</a>
										</div>
									}
									<div class="text-xs text-gray-400">
										Action ID: { action.ID } | Created: { action.CreatedAt.Format("2006-01-02 15:04") }
									</div>
								</div>
								<div class="ml-4">
									<button
										hx-delete={ "/api/v1/actions/" + action.ID }
										hx-target="closest .border-b"
										hx-swap="outerHTML"
										hx-confirm="Are you sure you want to delete this action?"
										class="text-red-500 hover:text-red-700 text-sm px-2 py-1 rounded hover:bg-red-50"
									>
										Delete
									</button>
								</div>
							</div>
						</div>
					}
				</div>
			}
		</div>
	}
}
