package templates

import "time"

type Person struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type PersonWithLastAction struct {
	ID           string     `json:"id"`
	Name         string     `json:"name"`
	CreatedAt    time.Time  `json:"created_at"`
	UpdatedAt    time.Time  `json:"updated_at"`
	LastActionAt *time.Time `json:"last_action_at,omitempty"`
}

func (p PersonWithLastAction) HasRecentAction() bool {
	if p.LastActionAt == nil {
		return false
	}
	weekAgo := time.Now().AddDate(0, 0, -7)
	return p.LastActionAt.After(weekAgo)
}

func (p PersonWithLastAction) LastActionDisplay() string {
	if p.LastActionAt == nil {
		return "No actions recorded"
	}
	return p.LastActionAt.Format("Jan 2, 2006 at 3:04 PM")
}

templ PersonItem(person Person) {
	<div class="border-b pb-2 mb-2" id={ "person-" + person.ID }>
		<div class="flex justify-between items-center">
			<div>
				<a href={ "/api/v1/people/" + person.ID } class="font-medium text-blue-600 hover:text-blue-800 hover:underline">{ person.Name }</a>
			</div>
			<div class="space-x-2">
				<!-- Edit functionality to be implemented with consolidated API -->
				<button
					hx-delete={ "/api/v1/people/" + person.ID }
					hx-target={ "#person-" + person.ID }
					hx-swap="outerHTML"
					hx-confirm="Are you sure you want to delete this person?"
					class="text-red-500 hover:text-red-700 text-sm"
				>
					Delete
				</button>
			</div>
		</div>
		<div class="text-xs text-gray-400 mt-1">
			Created: { person.CreatedAt.Format("2006-01-02 15:04:05") } | Updated: { person.UpdatedAt.Format("2006-01-02 15:04:05") }
		</div>
	</div>
}

templ PersonWithLastActionItem(person PersonWithLastAction) {
	<div class="border-b pb-2 mb-2" id={ "person-" + person.ID }>
		<div class="flex justify-between items-center">
			<div>
				<a href={ "/api/v1/people/" + person.ID } class="font-medium text-blue-600 hover:text-blue-800 hover:underline">{ person.Name }</a>
			</div>
			<div class="space-x-2">
				<button
					hx-delete={ "/api/v1/people/" + person.ID }
					hx-target={ "#person-" + person.ID }
					hx-swap="outerHTML"
					hx-confirm="Are you sure you want to delete this person?"
					class="text-red-500 hover:text-red-700 text-sm"
				>
					Delete
				</button>
			</div>
		</div>
		<div class="text-xs mt-1">
			if person.HasRecentAction() {
				<span class="text-green-600 font-medium">Last action: { person.LastActionDisplay() }</span>
			} else {
				<span class="text-red-600 font-medium bg-red-50 px-2 py-1 rounded">{ person.LastActionDisplay() }</span>
			}
		</div>
	</div>
}

templ PersonList(persons []Person) {
	if len(persons) == 0 {
		<div class="text-gray-500 text-center py-4">No people found. Add someone above!</div>
	} else {
		for _, person := range persons {
			@PersonItem(person)
		}
	}
}

templ PersonWithLastActionList(persons []PersonWithLastAction) {
	if len(persons) == 0 {
		<div class="text-gray-500 text-center py-4">No people found. Add someone above!</div>
	} else {
		for _, person := range persons {
			@PersonWithLastActionItem(person)
		}
	}
}

templ PersonSelectOptions(persons []Person) {
	<option value="">Select a person...</option>
	for _, person := range persons {
		<option value={ person.ID }>{ person.Name }</option>
	}
}

templ PersonSelectError() {
	<option value="">Error loading people</option>
}

templ PersonSelectLoading() {
	<option value="">Loading people...</option>
}

templ PersonDetail(person Person, actions []Action) {
	@Layout(person.Name + " - Person Details") {
		        @LockWrapper() {
			<!-- Header with back button -->
                        <div class="mb-6">
                                <a href="/" class="text-blue-600 hover:text-blue-800 flex items-center mb-4">
                                        ← Back to People List
                                </a>
                                <div class="bg-white rounded-lg shadow p-6">
                                        <h1 class="text-2xl font-bold text-gray-900 mb-2">{ person.Name }</h1>
                                </div>
                        </div>
                        <!-- Record Conversation Form -->
                        @RecordConversationForm(person.ID, "#conversations-list")
                        <div id="conversations-list" class="mb-6"></div>
                        <!-- Record Action Form -->
                        @RecordActionForm(person.ID, "#actions-list")
			<!-- Actions section -->
			<div class="bg-white rounded-lg shadow p-6">
				<div class="flex justify-between items-center mb-4">
					<h2 class="text-xl font-semibold text-gray-900">Actions ({ len(actions) })</h2>
					<a href="/" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded text-sm">
						Back to Home
					</a>
				</div>
				<div id="actions-list" class="space-y-4">
					if len(actions) == 0 {
						<div class="text-gray-500 text-center py-8" id="no-actions-message">
							<p class="mb-2">No actions recorded for { person.Name } yet.</p>
							<p class="text-sm">Use the form above to add the first action!</p>
						</div>
					} else {
						for _, action := range actions {
							<div class="border-b pb-4 last:border-b-0">
								<div class="flex items-start justify-between">
									<div class="flex-1">
										<div class="flex items-center gap-2 mb-2">
											<span class={ "inline-block w-3 h-3 rounded-full " + getBgColorForValence(action.Valence) }></span>
											<span class={ "font-medium capitalize " + getValenceColor(action.Valence) }>{ action.Valence }</span>
											<span class="text-sm text-gray-500">{ action.OccurredAt.Format("January 2, 2006 at 3:04 PM") }</span>
										</div>
										<p class="text-gray-800 mb-2">{ action.Description }</p>
										if action.References != "" {
											<div class="text-sm text-blue-600 mb-2">
												<a href={ templ.URL(action.References) } target="_blank" class="underline hover:no-underline">
													View Reference →
												</a>
											</div>
										}
									</div>
									<div class="ml-4">
										<button
											hx-delete={ "/api/v1/actions/" + action.ID }
											hx-target="closest .border-b"
											hx-swap="outerHTML"
											hx-confirm="Are you sure you want to delete this action?"
											class="text-red-500 hover:text-red-700 text-sm px-2 py-1 rounded hover:bg-red-50"
										>
											Delete
										</button>
									</div>
								</div>
							</div>
						}
					}
				</div>
			</div>
			<!-- JavaScript to handle form interactions -->
			<script>
				document.addEventListener('htmx:afterRequest', function(event) {
					// If an action was successfully added, remove the "no actions" message
					if (event.detail.successful && event.target.closest('form') && event.target.closest('form').action.includes('/actions')) {
						const noActionsMsg = document.getElementById('no-actions-message');
						if (noActionsMsg) {
							noActionsMsg.remove();
						}
					}
				});
			</script>
                }
	}
}
