package templates

import "time"

type Action struct {
	ID          string    `json:"id"`
	PersonID    string    `json:"person_id"`
	OccurredAt  time.Time `json:"occurred_at"`
	Description string    `json:"description"`
	References  string    `json:"references,omitempty"`
	Valence     string    `json:"valence"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func getValenceColor(valence string) string {
	if valence == "positive" {
		return "text-green-600"
	}
	return "text-red-600"
}

func getBgColorForValence(valence string) string {
	if valence == "positive" {
		return "bg-green-500"
	}
	return "bg-red-500"
}

templ ActionItem(action Action) {
	<div class="border-b pb-3 mb-3" id={ "action-" + action.ID }>
		<div class="flex justify-between items-start">
			<div class="flex-1">
				<div class="flex items-center gap-2 mb-1">
					<span class={ "inline-block w-2 h-2 rounded-full " + getBgColorForValence(action.Valence) }></span>
					<span class={ "font-medium capitalize " + getValenceColor(action.Valence) }>{ action.Valence }</span>
					<span class="text-xs text-gray-500">Person ID: { action.PersonID }</span>
				</div>
				<p class="text-gray-800 mb-1">{ action.Description }</p>
				if action.References != "" {
					<div class="text-xs text-blue-600 mt-1">
						<a href={ templ.URL(action.References) } target="_blank" class="underline">Reference</a>
					</div>
				}
				<div class="text-xs text-gray-400">
					Occurred: { action.OccurredAt.Format("2006-01-02 15:04") } | Created: { action.CreatedAt.Format("2006-01-02 15:04") }
				</div>
			</div>
			<div class="space-x-2 ml-4">
				<button
					hx-delete={ "/api/v1/actions/" + action.ID }
					hx-target={ "#action-" + action.ID }
					hx-swap="outerHTML"
					hx-confirm="Are you sure you want to delete this action?"
					class="text-red-500 hover:text-red-700 text-sm"
				>
					Delete
				</button>
			</div>
		</div>
	</div>
}

templ ActionList(actions []Action) {
	if len(actions) == 0 {
		<div class="text-gray-500 text-center py-4">No actions found. Add some above!</div>
	} else {
		for _, action := range actions {
			@ActionItem(action)
		}
	}
}

templ ActionError(message string) {
	<div class="text-red-500">{ message }</div>
}

templ ActionLoading() {
	<div class="text-gray-500">Loading...</div>
}

templ RecordActionForm(personID string, targetSelector string) {
	<div class="bg-white rounded-lg shadow p-6 mb-6">
		<h2 class="text-xl font-semibold mb-4">Record New Action</h2>
		<form hx-post="/api/v1/actions" hx-target={ targetSelector } hx-swap="afterbegin" hx-on::after-request="if(event.detail.successful) this.reset()" class="space-y-4">
			if personID != "" {
				<!-- Person is pre-selected -->
				<input type="hidden" name="person_id" value={ personID }/>
				<div class="text-sm text-gray-600 mb-4">
					Recording action for this person
				</div>
			} else {
				<!-- Show person selector -->
				<div>
					<label class="block text-sm font-medium text-gray-700 mb-1">Person</label>
					<select
						name="person_id"
						id="person-select"
						required
						class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
						hx-get="/api/v1/people?format=select"
						hx-trigger="load"
						hx-target="#person-select"
						hx-swap="innerHTML"
					>
						<option value="">Loading people...</option>
					</select>
				</div>
			}
			<div>
				<label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
				<textarea
					name="description"
					placeholder="What did they do?"
					required
					rows="2"
					class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
				></textarea>
			</div>
			<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
				<div>
					<label class="block text-sm font-medium text-gray-700 mb-1">Valence</label>
					<div class="space-y-2">
						<label class="flex items-center">
							<input
								type="radio"
								name="valence"
								value="positive"
								required
								class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300"
							/>
							<span class="ml-2 text-sm text-gray-700">Positive</span>
						</label>
						<label class="flex items-center">
							<input
								type="radio"
								name="valence"
								value="negative"
								required
								class="h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300"
							/>
							<span class="ml-2 text-sm text-gray-700">Negative</span>
						</label>
					</div>
				</div>
				<div>
					<label class="block text-sm font-medium text-gray-700 mb-1">When (optional)</label>
					<input
						type="datetime-local"
						name="occurred_at"
						class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
					/>
				</div>
			</div>
			<div>
				<label class="block text-sm font-medium text-gray-700 mb-1">References (optional)</label>
				<input
					type="url"
					name="references"
					placeholder="https://example.com/link"
					class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
				/>
			</div>
			<button
				type="submit"
				class="w-full px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
				hx-indicator="#submit-indicator"
			>
				<span id="submit-indicator" class="htmx-indicator">
					<svg class="inline w-4 h-4 mr-2 animate-spin" viewBox="0 0 24 24">
						<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
						<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
					</svg>
					Saving...
				</span>
				<span class="htmx-no-indicator">Record Action</span>
			</button>
		</form>
	</div>
}
